---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log|default(false) | bool) }}"
  tasks:
    - name: create.yml | get scenario name
      set_fact:
        scenario: "{{lookup('env', 'MOLECULE_SCENARIO_NAME')}}"

    - name: create.yml | get ingress name
      set_fact:
        ingress: "nginx-ingress"

    - name: create.yml | get k8s config path (default ~/.kube/config.yml)
      set_fact:
        config_path: "{{ item.config_path }}"
      with_items: "{{ molecule_yml.platforms }}"
      when: item.config_path is defined

    - name: create.yml | get a list of all namespaces objects
      k8s_facts:
        api_version: "{{ api_version | default('v1') }}"
        kind: NamespaceList
        name: "{{ scenario }}"
        namespace: "{{ scenario }}"
        kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
      register: namespace_list

    - name: create.yml | check namespace exist
      set_fact:
        namespace_exist: "{% if scenario == item.metadata.name %}True{% else %}False{% endif %}"
      with_items: "{{ namespace_list.resources }}"

    - name: create.yml | get a list of all daemonset objects
      k8s_facts:
        api_version: "{{ api_version | default('v1') }}"
        kind: DaemonSet
        namespace: "{{ scenario }}"
        kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
      register: daemonset_list

    - name: create.yml | check daemonset exist
      set_fact:
        daemonset_exist: "{% if ingress == item.metadata.name %}True{% else %}False{% endif %}"
      with_items: "{{ daemonset_list.resources }}"

    - name: create.yml | create namespace
      block:
      - name: create.yml | create namespace
        k8s:
          name: "{{ scenario }}"
          api_version: "{{ api_version | default('v1') }}"
          kind: Namespace
          state: present
          kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
        when: item.spec.finalizers is defined and scenario not in item.spec.finalizers
        with_list: "{{ namespace_list.resources }}"
      when: namespace_exist is not defined or namespace_exist != True

    - name: create.yml | get k8s rbac
      set_fact:
        rbac: "{{ item.rbac }}"
      when: item.rbac is defined
      with_items: "{{ molecule_yml.platforms }}"

    - name: create.yml | create rbac if need
      k8s_raw:
        state: present
        definition:
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: "{{ ingress }}"
          rules:
          - apiGroups:
            - ""
            resources:
            - services
            - endpoints
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - ""
            resources:
            - secrets
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - ""
            resources:
            - configmaps
            verbs:
            - get
            - list
            - watch
            - update
            - create
          - apiGroups:
            - ""
            resources:
            - pods
            verbs:
            - list
          - apiGroups:
            - ""
            resources:
            - events
            verbs:
            - create
            - patch
          - apiGroups:
            - extensions
            resources:
            - ingresses
            verbs:
            - list
            - watch
            - get
          - apiGroups:
            - "extensions"
            resources:
            - ingresses/status
            verbs:
            - update
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: "{{ ingress }}"
          subjects:
          - kind: ServiceAccount
            name: "{{ ingress }}"
            namespace: "{{ scenario }}"
          roleRef:
            kind: ClusterRole
            name: "{{ ingress }}"
            apiGroup: rbac.authorization.k8s.io
      when: rbac is defined and rbac == True

    - name: create.yml | create someshit
      block:
      - name: create.yml | create service account
        k8s:
          state: present
          kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
          definition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: "{{ ingress }}"
              namespace: "{{ scenario }}"

      - name: create.yml | create secret
        k8s:
          state: present
          kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
          definition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: default-server-secret
              namespace: "{{ scenario }}"
            type: Opaque
            data:
              tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRREFPRjl0THNhWFhEQU5CZ2txaGtpRzl3MEJBUXNGQURBaE1SOHdIUVlEVlFRRERCWk8KUjBsT1dFbHVaM0psYzNORGIyNTBjbTlzYkdWeU1CNFhEVEU0TURreE1qRTRNRE16TlZvWERUSXpNRGt4TVRFNApNRE16TlZvd0lURWZNQjBHQTFVRUF3d1dUa2RKVGxoSmJtZHlaWE56UTI5dWRISnZiR3hsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwvN2hIUEtFWGRMdjNyaUM3QlBrMTNpWkt5eTlyQ08KR2xZUXYyK2EzUDF0azIrS3YwVGF5aGRCbDRrcnNUcTZzZm8vWUk1Y2Vhbkw4WGM3U1pyQkVRYm9EN2REbWs1Qgo4eDZLS2xHWU5IWlg0Rm5UZ0VPaStlM2ptTFFxRlBSY1kzVnNPazFFeUZBL0JnWlJVbkNHZUtGeERSN0tQdGhyCmtqSXVuektURXUyaDU4Tlp0S21ScUJHdDEwcTNRYzhZT3ExM2FnbmovUWRjc0ZYYTJnMjB1K1lYZDdoZ3krZksKWk4vVUkxQUQ0YzZyM1lma1ZWUmVHd1lxQVp1WXN2V0RKbW1GNWRwdEMzN011cDBPRUxVTExSakZJOTZXNXIwSAo1TmdPc25NWFJNV1hYVlpiNWRxT3R0SmRtS3FhZ25TZ1JQQVpQN2MwQjFQU2FqYzZjNGZRVXpNQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpLb2tRdGRPcEsrTzhibWVPc3lySmdJSXJycVFVY2ZOUitjb0hZVUoKdGhrYnhITFMzR3VBTWI5dm15VExPY2xxeC9aYzJPblEwMEJCLzlTb0swcitFZ1U2UlVrRWtWcitTTFA3NTdUWgozZWI4dmdPdEduMS9ienM3bzNBaS9kclkrcUI5Q2k1S3lPc3FHTG1US2xFaUtOYkcyR1ZyTWxjS0ZYQU80YTY3Cklnc1hzYktNbTQwV1U3cG9mcGltU1ZmaXFSdkV5YmN3N0NYODF6cFErUyt1eHRYK2VBZ3V0NHh3VlI5d2IyVXYKelhuZk9HbWhWNThDd1dIQnNKa0kxNXhaa2VUWXdSN0diaEFMSkZUUkk3dkhvQXprTWIzbjAxQjQyWjNrN3RXNQpJUDFmTlpIOFUvOWxiUHNoT21FRFZkdjF5ZytVRVJxbStGSis2R0oxeFJGcGZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
              tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdi91RWM4b1JkMHUvZXVJTHNFK1RYZUprckxMMnNJNGFWaEMvYjVyYy9XMlRiNHEvClJOcktGMEdYaVN1eE9ycXgrajlnamx4NXFjdnhkenRKbXNFUkJ1Z1B0ME9hVGtIekhvb3FVWmcwZGxmZ1dkT0EKUTZMNTdlT1l0Q29VOUZ4amRXdzZUVVRJVUQ4R0JsRlNjSVo0b1hFTkhzbysyR3VTTWk2Zk1wTVM3YUhudzFtMApxWkdvRWEzWFNyZEJ6eGc2clhkcUNlUDlCMXl3VmRyYURiUzc1aGQzdUdETDU4cGszOVFqVUFQaHpxdmRoK1JWClZGNGJCaW9CbTVpeTlZTW1hWVhsMm0wTGZzeTZuUTRRdFFzdEdNVWozcGJtdlFmazJBNnljeGRFeFpkZFZsdmwKMm82MjBsMllxcHFDZEtCRThCay90elFIVTlKcU56cHpoOUJUTXdJREFRQUJBb0lCQVFDZklHbXowOHhRVmorNwpLZnZJUXQwQ0YzR2MxNld6eDhVNml4MHg4Mm15d1kxUUNlL3BzWE9LZlRxT1h1SENyUlp5TnUvZ2IvUUQ4bUFOCmxOMjRZTWl0TWRJODg5TEZoTkp3QU5OODJDeTczckM5bzVvUDlkazAvYzRIbjAzSkVYNzZ5QjgzQm9rR1FvYksKMjhMNk0rdHUzUmFqNjd6Vmc2d2szaEhrU0pXSzBwV1YrSjdrUkRWYmhDYUZhNk5nMUZNRWxhTlozVDhhUUtyQgpDUDNDeEFTdjYxWTk5TEI4KzNXWVFIK3NYaTVGM01pYVNBZ1BkQUk3WEh1dXFET1lvMU5PL0JoSGt1aVg2QnRtCnorNTZud2pZMy8yUytSRmNBc3JMTnIwMDJZZi9oY0IraVlDNzVWYmcydVd6WTY3TWdOTGQ5VW9RU3BDRkYrVm4KM0cyUnhybnhBb0dCQU40U3M0ZVlPU2huMVpQQjdhTUZsY0k2RHR2S2ErTGZTTXFyY2pOZjJlSEpZNnhubmxKdgpGenpGL2RiVWVTbWxSekR0WkdlcXZXaHFISy9iTjIyeWJhOU1WMDlRQ0JFTk5jNmtWajJTVHpUWkJVbEx4QzYrCk93Z0wyZHhKendWelU0VC84ajdHalRUN05BZVpFS2FvRHFyRG5BYWkyaW5oZU1JVWZHRXFGKzJyQW9HQkFOMVAKK0tZL0lsS3RWRzRKSklQNzBjUis3RmpyeXJpY05iWCtQVzUvOXFHaWxnY2grZ3l4b25BWlBpd2NpeDN3QVpGdwpaZC96ZFB2aTBkWEppc1BSZjRMazg5b2pCUmpiRmRmc2l5UmJYbyt3TFU4NUhRU2NGMnN5aUFPaTVBRHdVU0FkCm45YWFweUNweEFkREtERHdObit3ZFhtaTZ0OHRpSFRkK3RoVDhkaVpBb0dCQUt6Wis1bG9OOTBtYlF4VVh5YUwKMjFSUm9tMGJjcndsTmVCaWNFSmlzaEhYa2xpSVVxZ3hSZklNM2hhUVRUcklKZENFaHFsV01aV0xPb2I2NTNyZgo3aFlMSXM1ZUtka3o0aFRVdnpldm9TMHVXcm9CV2xOVHlGanIrSWhKZnZUc0hpOGdsU3FkbXgySkJhZUFVWUNXCndNdlQ4NmNLclNyNkQrZG8wS05FZzFsL0FvR0FlMkFVdHVFbFNqLzBmRzgrV3hHc1RFV1JqclRNUzRSUjhRWXQKeXdjdFA4aDZxTGxKUTRCWGxQU05rMXZLTmtOUkxIb2pZT2pCQTViYjhibXNVU1BlV09NNENoaFJ4QnlHbmR2eAphYkJDRkFwY0IvbEg4d1R0alVZYlN5T294ZGt5OEp0ek90ajJhS0FiZHd6NlArWDZDODhjZmxYVFo5MWpYL3RMCjF3TmRKS2tDZ1lCbyt0UzB5TzJ2SWFmK2UwSkN5TGhzVDQ5cTN3Zis2QWVqWGx2WDJ1VnRYejN5QTZnbXo5aCsKcDNlK2JMRUxwb3B0WFhNdUFRR0xhUkcrYlNNcjR5dERYbE5ZSndUeThXczNKY3dlSTdqZVp2b0ZpbmNvVlVIMwphdmxoTUVCRGYxSjltSDB5cDBwWUNaS2ROdHNvZEZtQktzVEtQMjJhTmtsVVhCS3gyZzR6cFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=

      - name: create.yml | create config
        k8s:
          state: present
          kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
          definition:
            kind: ConfigMap
            apiVersion: "{{ api_version | default('v1') }}"
            metadata:
              name: nginx-config
              namespace: "{{ scenario }}"
            data:

    - name: create.yml | create daemonset and ingress
      block:
      - name: create.yml | create daemonset and ingress
        k8s:
          state: present
          kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
          definition:
            apiVersion: extensions/v1beta1
            kind: DaemonSet
            metadata:
              name: "{{ ingress }}"
              namespace: "{{ scenario }}"
            spec:
              selector:
                matchLabels:
                  app: "{{ scenario }}"
              template:
                metadata:
                  labels:
                    app: "{{ scenario }}"
                  annotations:
                    prometheus.io/scrape: "true"
                    prometheus.io/port: "9113"
                spec:
                  serviceAccountName: "{{ ingress }}"
                  containers:
                    - image: nginx/nginx-ingress:edge
                      name: "{{ ingress }}"
                      ports:
                      - name: mon
                        containerPort: 8080
                        hostPort: 8080
                      env:
                      - name: POD_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      args:
                        - -nginx-configmaps=$(POD_NAMESPACE)/nginx-config
                        - -default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret
                        - -report-ingress-status
                        - -external-service=nginx-ingress
                        - -health-status
                        - -nginx-debug
                        - -nginx-status
                    - image: nginx/nginx-prometheus-exporter:0.2.0
                      name: nginx-prometheus
                      ports:
                      - name: prometheus
                        containerPort: 9113
                        hostPort: 9113
                      args:
                        - -web.listen-address
                        - :9113
                        - -nginx.scrape-uri
                        - http://127.0.0.1:8080/stub_status
      when: daemonset_exist is not defined or daemonset_exist != True

    - name: create.yml | create pods
      block:
      - name: create.yml | copy k8s template
        template:
          src: "{{ molecule_scenario_directory }}/k8s.j2"
          dest: "{{ molecule_ephemeral_directory }}/k8s"
        with_items: "{{ molecule_yml.platforms }}"

      - name: create.yml | create pods
        k8s:
          state: present
          kubeconfig: "{{ config_path | default('~/.kube/config.yml') }}"
          definition: "{{ lookup('template', '{{ molecule_ephemeral_directory }}/k8s') }}"
        register: server
        with_items: "{{ molecule_yml.platforms }}"
        async: 7200
        poll: 0

      - name: create.yml | wait for instance(s) creation to complete
        async_status:
          jid: "{{ item.ansible_job_id }}"
        register: k8s_jobs
        until: k8s_jobs.finished
        retries: 30
        with_items: "{{ server.results }}"
      ignore_errors: True
